// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mongodb_test

import (
	"context"

	"github.com/mbretter/go-mongodb/v2"
	mock "github.com/stretchr/testify/mock"
	"go.mongodb.org/mongo-driver/v2/mongo"
	"go.mongodb.org/mongo-driver/v2/mongo/options"
)

// NewConnectorMock creates a new instance of ConnectorMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnectorMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConnectorMock {
	mock := &ConnectorMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ConnectorMock is an autogenerated mock type for the Connector type
type ConnectorMock struct {
	mock.Mock
}

type ConnectorMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ConnectorMock) EXPECT() *ConnectorMock_Expecter {
	return &ConnectorMock_Expecter{mock: &_m.Mock}
}

// Aggregate provides a mock function for the type ConnectorMock
func (_mock *ConnectorMock) Aggregate(pipeline interface{}, opts ...options.Lister[options.AggregateOptions]) (*mongo.Cursor, error) {
	// options.Lister[options.AggregateOptions]
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pipeline)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Aggregate")
	}

	var r0 *mongo.Cursor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(interface{}, ...options.Lister[options.AggregateOptions]) (*mongo.Cursor, error)); ok {
		return returnFunc(pipeline, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(interface{}, ...options.Lister[options.AggregateOptions]) *mongo.Cursor); ok {
		r0 = returnFunc(pipeline, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Cursor)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(interface{}, ...options.Lister[options.AggregateOptions]) error); ok {
		r1 = returnFunc(pipeline, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ConnectorMock_Aggregate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Aggregate'
type ConnectorMock_Aggregate_Call struct {
	*mock.Call
}

// Aggregate is a helper method to define mock.On call
//   - pipeline interface{}
//   - opts ...options.Lister[options.AggregateOptions]
func (_e *ConnectorMock_Expecter) Aggregate(pipeline interface{}, opts ...interface{}) *ConnectorMock_Aggregate_Call {
	return &ConnectorMock_Aggregate_Call{Call: _e.mock.On("Aggregate",
		append([]interface{}{pipeline}, opts...)...)}
}

func (_c *ConnectorMock_Aggregate_Call) Run(run func(pipeline interface{}, opts ...options.Lister[options.AggregateOptions])) *ConnectorMock_Aggregate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 []options.Lister[options.AggregateOptions]
		variadicArgs := make([]options.Lister[options.AggregateOptions], len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.AggregateOptions])
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *ConnectorMock_Aggregate_Call) Return(cur *mongo.Cursor, err error) *ConnectorMock_Aggregate_Call {
	_c.Call.Return(cur, err)
	return _c
}

func (_c *ConnectorMock_Aggregate_Call) RunAndReturn(run func(pipeline interface{}, opts ...options.Lister[options.AggregateOptions]) (*mongo.Cursor, error)) *ConnectorMock_Aggregate_Call {
	_c.Call.Return(run)
	return _c
}

// Collection provides a mock function for the type ConnectorMock
func (_mock *ConnectorMock) Collection(coll string, opts ...options.Lister[options.CollectionOptions]) *mongo.Collection {
	// options.Lister[options.CollectionOptions]
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, coll)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Collection")
	}

	var r0 *mongo.Collection
	if returnFunc, ok := ret.Get(0).(func(string, ...options.Lister[options.CollectionOptions]) *mongo.Collection); ok {
		r0 = returnFunc(coll, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Collection)
		}
	}
	return r0
}

// ConnectorMock_Collection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Collection'
type ConnectorMock_Collection_Call struct {
	*mock.Call
}

// Collection is a helper method to define mock.On call
//   - coll string
//   - opts ...options.Lister[options.CollectionOptions]
func (_e *ConnectorMock_Expecter) Collection(coll interface{}, opts ...interface{}) *ConnectorMock_Collection_Call {
	return &ConnectorMock_Collection_Call{Call: _e.mock.On("Collection",
		append([]interface{}{coll}, opts...)...)}
}

func (_c *ConnectorMock_Collection_Call) Run(run func(coll string, opts ...options.Lister[options.CollectionOptions])) *ConnectorMock_Collection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []options.Lister[options.CollectionOptions]
		variadicArgs := make([]options.Lister[options.CollectionOptions], len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.CollectionOptions])
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *ConnectorMock_Collection_Call) Return(collection *mongo.Collection) *ConnectorMock_Collection_Call {
	_c.Call.Return(collection)
	return _c
}

func (_c *ConnectorMock_Collection_Call) RunAndReturn(run func(coll string, opts ...options.Lister[options.CollectionOptions]) *mongo.Collection) *ConnectorMock_Collection_Call {
	_c.Call.Return(run)
	return _c
}

// Count provides a mock function for the type ConnectorMock
func (_mock *ConnectorMock) Count(filter interface{}, opts ...options.Lister[options.CountOptions]) (int64, error) {
	// options.Lister[options.CountOptions]
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, filter)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(interface{}, ...options.Lister[options.CountOptions]) (int64, error)); ok {
		return returnFunc(filter, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(interface{}, ...options.Lister[options.CountOptions]) int64); ok {
		r0 = returnFunc(filter, opts...)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(interface{}, ...options.Lister[options.CountOptions]) error); ok {
		r1 = returnFunc(filter, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ConnectorMock_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type ConnectorMock_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - filter interface{}
//   - opts ...options.Lister[options.CountOptions]
func (_e *ConnectorMock_Expecter) Count(filter interface{}, opts ...interface{}) *ConnectorMock_Count_Call {
	return &ConnectorMock_Count_Call{Call: _e.mock.On("Count",
		append([]interface{}{filter}, opts...)...)}
}

func (_c *ConnectorMock_Count_Call) Run(run func(filter interface{}, opts ...options.Lister[options.CountOptions])) *ConnectorMock_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 []options.Lister[options.CountOptions]
		variadicArgs := make([]options.Lister[options.CountOptions], len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.CountOptions])
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *ConnectorMock_Count_Call) Return(cnt int64, err error) *ConnectorMock_Count_Call {
	_c.Call.Return(cnt, err)
	return _c
}

func (_c *ConnectorMock_Count_Call) RunAndReturn(run func(filter interface{}, opts ...options.Lister[options.CountOptions]) (int64, error)) *ConnectorMock_Count_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIndex provides a mock function for the type ConnectorMock
func (_mock *ConnectorMock) CreateIndex(model mongo.IndexModel, opts ...options.Lister[options.CreateIndexesOptions]) (string, error) {
	// options.Lister[options.CreateIndexesOptions]
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, model)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateIndex")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(mongo.IndexModel, ...options.Lister[options.CreateIndexesOptions]) (string, error)); ok {
		return returnFunc(model, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(mongo.IndexModel, ...options.Lister[options.CreateIndexesOptions]) string); ok {
		r0 = returnFunc(model, opts...)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(mongo.IndexModel, ...options.Lister[options.CreateIndexesOptions]) error); ok {
		r1 = returnFunc(model, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ConnectorMock_CreateIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIndex'
type ConnectorMock_CreateIndex_Call struct {
	*mock.Call
}

// CreateIndex is a helper method to define mock.On call
//   - model mongo.IndexModel
//   - opts ...options.Lister[options.CreateIndexesOptions]
func (_e *ConnectorMock_Expecter) CreateIndex(model interface{}, opts ...interface{}) *ConnectorMock_CreateIndex_Call {
	return &ConnectorMock_CreateIndex_Call{Call: _e.mock.On("CreateIndex",
		append([]interface{}{model}, opts...)...)}
}

func (_c *ConnectorMock_CreateIndex_Call) Run(run func(model mongo.IndexModel, opts ...options.Lister[options.CreateIndexesOptions])) *ConnectorMock_CreateIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 mongo.IndexModel
		if args[0] != nil {
			arg0 = args[0].(mongo.IndexModel)
		}
		var arg1 []options.Lister[options.CreateIndexesOptions]
		variadicArgs := make([]options.Lister[options.CreateIndexesOptions], len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.CreateIndexesOptions])
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *ConnectorMock_CreateIndex_Call) Return(s string, err error) *ConnectorMock_CreateIndex_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *ConnectorMock_CreateIndex_Call) RunAndReturn(run func(model mongo.IndexModel, opts ...options.Lister[options.CreateIndexesOptions]) (string, error)) *ConnectorMock_CreateIndex_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSearchIndex provides a mock function for the type ConnectorMock
func (_mock *ConnectorMock) CreateSearchIndex(model mongo.SearchIndexModel, opts ...options.Lister[options.CreateSearchIndexesOptions]) (string, error) {
	// options.Lister[options.CreateSearchIndexesOptions]
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, model)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSearchIndex")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(mongo.SearchIndexModel, ...options.Lister[options.CreateSearchIndexesOptions]) (string, error)); ok {
		return returnFunc(model, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(mongo.SearchIndexModel, ...options.Lister[options.CreateSearchIndexesOptions]) string); ok {
		r0 = returnFunc(model, opts...)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(mongo.SearchIndexModel, ...options.Lister[options.CreateSearchIndexesOptions]) error); ok {
		r1 = returnFunc(model, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ConnectorMock_CreateSearchIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSearchIndex'
type ConnectorMock_CreateSearchIndex_Call struct {
	*mock.Call
}

// CreateSearchIndex is a helper method to define mock.On call
//   - model mongo.SearchIndexModel
//   - opts ...options.Lister[options.CreateSearchIndexesOptions]
func (_e *ConnectorMock_Expecter) CreateSearchIndex(model interface{}, opts ...interface{}) *ConnectorMock_CreateSearchIndex_Call {
	return &ConnectorMock_CreateSearchIndex_Call{Call: _e.mock.On("CreateSearchIndex",
		append([]interface{}{model}, opts...)...)}
}

func (_c *ConnectorMock_CreateSearchIndex_Call) Run(run func(model mongo.SearchIndexModel, opts ...options.Lister[options.CreateSearchIndexesOptions])) *ConnectorMock_CreateSearchIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 mongo.SearchIndexModel
		if args[0] != nil {
			arg0 = args[0].(mongo.SearchIndexModel)
		}
		var arg1 []options.Lister[options.CreateSearchIndexesOptions]
		variadicArgs := make([]options.Lister[options.CreateSearchIndexesOptions], len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.CreateSearchIndexesOptions])
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *ConnectorMock_CreateSearchIndex_Call) Return(s string, err error) *ConnectorMock_CreateSearchIndex_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *ConnectorMock_CreateSearchIndex_Call) RunAndReturn(run func(model mongo.SearchIndexModel, opts ...options.Lister[options.CreateSearchIndexesOptions]) (string, error)) *ConnectorMock_CreateSearchIndex_Call {
	_c.Call.Return(run)
	return _c
}

// Database provides a mock function for the type ConnectorMock
func (_mock *ConnectorMock) Database() *mongo.Database {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Database")
	}

	var r0 *mongo.Database
	if returnFunc, ok := ret.Get(0).(func() *mongo.Database); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Database)
		}
	}
	return r0
}

// ConnectorMock_Database_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Database'
type ConnectorMock_Database_Call struct {
	*mock.Call
}

// Database is a helper method to define mock.On call
func (_e *ConnectorMock_Expecter) Database() *ConnectorMock_Database_Call {
	return &ConnectorMock_Database_Call{Call: _e.mock.On("Database")}
}

func (_c *ConnectorMock_Database_Call) Run(run func()) *ConnectorMock_Database_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConnectorMock_Database_Call) Return(database *mongo.Database) *ConnectorMock_Database_Call {
	_c.Call.Return(database)
	return _c
}

func (_c *ConnectorMock_Database_Call) RunAndReturn(run func() *mongo.Database) *ConnectorMock_Database_Call {
	_c.Call.Return(run)
	return _c
}

// Decode provides a mock function for the type ConnectorMock
func (_mock *ConnectorMock) Decode(cur *mongo.Cursor, val interface{}) error {
	ret := _mock.Called(cur, val)

	if len(ret) == 0 {
		panic("no return value specified for Decode")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*mongo.Cursor, interface{}) error); ok {
		r0 = returnFunc(cur, val)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ConnectorMock_Decode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decode'
type ConnectorMock_Decode_Call struct {
	*mock.Call
}

// Decode is a helper method to define mock.On call
//   - cur *mongo.Cursor
//   - val interface{}
func (_e *ConnectorMock_Expecter) Decode(cur interface{}, val interface{}) *ConnectorMock_Decode_Call {
	return &ConnectorMock_Decode_Call{Call: _e.mock.On("Decode", cur, val)}
}

func (_c *ConnectorMock_Decode_Call) Run(run func(cur *mongo.Cursor, val interface{})) *ConnectorMock_Decode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *mongo.Cursor
		if args[0] != nil {
			arg0 = args[0].(*mongo.Cursor)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ConnectorMock_Decode_Call) Return(err error) *ConnectorMock_Decode_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ConnectorMock_Decode_Call) RunAndReturn(run func(cur *mongo.Cursor, val interface{}) error) *ConnectorMock_Decode_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMany provides a mock function for the type ConnectorMock
func (_mock *ConnectorMock) DeleteMany(filter interface{}, opts ...options.Lister[options.DeleteManyOptions]) (*mongo.DeleteResult, error) {
	// options.Lister[options.DeleteManyOptions]
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, filter)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMany")
	}

	var r0 *mongo.DeleteResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(interface{}, ...options.Lister[options.DeleteManyOptions]) (*mongo.DeleteResult, error)); ok {
		return returnFunc(filter, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(interface{}, ...options.Lister[options.DeleteManyOptions]) *mongo.DeleteResult); ok {
		r0 = returnFunc(filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.DeleteResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(interface{}, ...options.Lister[options.DeleteManyOptions]) error); ok {
		r1 = returnFunc(filter, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ConnectorMock_DeleteMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMany'
type ConnectorMock_DeleteMany_Call struct {
	*mock.Call
}

// DeleteMany is a helper method to define mock.On call
//   - filter interface{}
//   - opts ...options.Lister[options.DeleteManyOptions]
func (_e *ConnectorMock_Expecter) DeleteMany(filter interface{}, opts ...interface{}) *ConnectorMock_DeleteMany_Call {
	return &ConnectorMock_DeleteMany_Call{Call: _e.mock.On("DeleteMany",
		append([]interface{}{filter}, opts...)...)}
}

func (_c *ConnectorMock_DeleteMany_Call) Run(run func(filter interface{}, opts ...options.Lister[options.DeleteManyOptions])) *ConnectorMock_DeleteMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 []options.Lister[options.DeleteManyOptions]
		variadicArgs := make([]options.Lister[options.DeleteManyOptions], len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.DeleteManyOptions])
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *ConnectorMock_DeleteMany_Call) Return(res *mongo.DeleteResult, err error) *ConnectorMock_DeleteMany_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *ConnectorMock_DeleteMany_Call) RunAndReturn(run func(filter interface{}, opts ...options.Lister[options.DeleteManyOptions]) (*mongo.DeleteResult, error)) *ConnectorMock_DeleteMany_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOne provides a mock function for the type ConnectorMock
func (_mock *ConnectorMock) DeleteOne(filter interface{}, opts ...options.Lister[options.DeleteOneOptions]) (*mongo.DeleteResult, error) {
	// options.Lister[options.DeleteOneOptions]
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, filter)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOne")
	}

	var r0 *mongo.DeleteResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(interface{}, ...options.Lister[options.DeleteOneOptions]) (*mongo.DeleteResult, error)); ok {
		return returnFunc(filter, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(interface{}, ...options.Lister[options.DeleteOneOptions]) *mongo.DeleteResult); ok {
		r0 = returnFunc(filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.DeleteResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(interface{}, ...options.Lister[options.DeleteOneOptions]) error); ok {
		r1 = returnFunc(filter, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ConnectorMock_DeleteOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOne'
type ConnectorMock_DeleteOne_Call struct {
	*mock.Call
}

// DeleteOne is a helper method to define mock.On call
//   - filter interface{}
//   - opts ...options.Lister[options.DeleteOneOptions]
func (_e *ConnectorMock_Expecter) DeleteOne(filter interface{}, opts ...interface{}) *ConnectorMock_DeleteOne_Call {
	return &ConnectorMock_DeleteOne_Call{Call: _e.mock.On("DeleteOne",
		append([]interface{}{filter}, opts...)...)}
}

func (_c *ConnectorMock_DeleteOne_Call) Run(run func(filter interface{}, opts ...options.Lister[options.DeleteOneOptions])) *ConnectorMock_DeleteOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 []options.Lister[options.DeleteOneOptions]
		variadicArgs := make([]options.Lister[options.DeleteOneOptions], len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.DeleteOneOptions])
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *ConnectorMock_DeleteOne_Call) Return(res *mongo.DeleteResult, err error) *ConnectorMock_DeleteOne_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *ConnectorMock_DeleteOne_Call) RunAndReturn(run func(filter interface{}, opts ...options.Lister[options.DeleteOneOptions]) (*mongo.DeleteResult, error)) *ConnectorMock_DeleteOne_Call {
	_c.Call.Return(run)
	return _c
}

// Distinct provides a mock function for the type ConnectorMock
func (_mock *ConnectorMock) Distinct(fieldName string, filter interface{}, opts ...options.Lister[options.DistinctOptions]) (*mongo.DistinctResult, error) {
	// options.Lister[options.DistinctOptions]
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, fieldName, filter)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Distinct")
	}

	var r0 *mongo.DistinctResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, interface{}, ...options.Lister[options.DistinctOptions]) (*mongo.DistinctResult, error)); ok {
		return returnFunc(fieldName, filter, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(string, interface{}, ...options.Lister[options.DistinctOptions]) *mongo.DistinctResult); ok {
		r0 = returnFunc(fieldName, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.DistinctResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, interface{}, ...options.Lister[options.DistinctOptions]) error); ok {
		r1 = returnFunc(fieldName, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ConnectorMock_Distinct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Distinct'
type ConnectorMock_Distinct_Call struct {
	*mock.Call
}

// Distinct is a helper method to define mock.On call
//   - fieldName string
//   - filter interface{}
//   - opts ...options.Lister[options.DistinctOptions]
func (_e *ConnectorMock_Expecter) Distinct(fieldName interface{}, filter interface{}, opts ...interface{}) *ConnectorMock_Distinct_Call {
	return &ConnectorMock_Distinct_Call{Call: _e.mock.On("Distinct",
		append([]interface{}{fieldName, filter}, opts...)...)}
}

func (_c *ConnectorMock_Distinct_Call) Run(run func(fieldName string, filter interface{}, opts ...options.Lister[options.DistinctOptions])) *ConnectorMock_Distinct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		var arg2 []options.Lister[options.DistinctOptions]
		variadicArgs := make([]options.Lister[options.DistinctOptions], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.DistinctOptions])
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ConnectorMock_Distinct_Call) Return(res *mongo.DistinctResult, err error) *ConnectorMock_Distinct_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *ConnectorMock_Distinct_Call) RunAndReturn(run func(fieldName string, filter interface{}, opts ...options.Lister[options.DistinctOptions]) (*mongo.DistinctResult, error)) *ConnectorMock_Distinct_Call {
	_c.Call.Return(run)
	return _c
}

// Drop provides a mock function for the type ConnectorMock
func (_mock *ConnectorMock) Drop() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Drop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ConnectorMock_Drop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Drop'
type ConnectorMock_Drop_Call struct {
	*mock.Call
}

// Drop is a helper method to define mock.On call
func (_e *ConnectorMock_Expecter) Drop() *ConnectorMock_Drop_Call {
	return &ConnectorMock_Drop_Call{Call: _e.mock.On("Drop")}
}

func (_c *ConnectorMock_Drop_Call) Run(run func()) *ConnectorMock_Drop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConnectorMock_Drop_Call) Return(err error) *ConnectorMock_Drop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ConnectorMock_Drop_Call) RunAndReturn(run func() error) *ConnectorMock_Drop_Call {
	_c.Call.Return(run)
	return _c
}

// FetchAll provides a mock function for the type ConnectorMock
func (_mock *ConnectorMock) FetchAll(cur *mongo.Cursor, results interface{}) error {
	ret := _mock.Called(cur, results)

	if len(ret) == 0 {
		panic("no return value specified for FetchAll")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*mongo.Cursor, interface{}) error); ok {
		r0 = returnFunc(cur, results)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ConnectorMock_FetchAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchAll'
type ConnectorMock_FetchAll_Call struct {
	*mock.Call
}

// FetchAll is a helper method to define mock.On call
//   - cur *mongo.Cursor
//   - results interface{}
func (_e *ConnectorMock_Expecter) FetchAll(cur interface{}, results interface{}) *ConnectorMock_FetchAll_Call {
	return &ConnectorMock_FetchAll_Call{Call: _e.mock.On("FetchAll", cur, results)}
}

func (_c *ConnectorMock_FetchAll_Call) Run(run func(cur *mongo.Cursor, results interface{})) *ConnectorMock_FetchAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *mongo.Cursor
		if args[0] != nil {
			arg0 = args[0].(*mongo.Cursor)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ConnectorMock_FetchAll_Call) Return(err error) *ConnectorMock_FetchAll_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ConnectorMock_FetchAll_Call) RunAndReturn(run func(cur *mongo.Cursor, results interface{}) error) *ConnectorMock_FetchAll_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function for the type ConnectorMock
func (_mock *ConnectorMock) Find(filter interface{}, opts ...options.Lister[options.FindOptions]) (*mongo.Cursor, error) {
	// options.Lister[options.FindOptions]
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, filter)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *mongo.Cursor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(interface{}, ...options.Lister[options.FindOptions]) (*mongo.Cursor, error)); ok {
		return returnFunc(filter, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(interface{}, ...options.Lister[options.FindOptions]) *mongo.Cursor); ok {
		r0 = returnFunc(filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Cursor)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(interface{}, ...options.Lister[options.FindOptions]) error); ok {
		r1 = returnFunc(filter, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ConnectorMock_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type ConnectorMock_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - filter interface{}
//   - opts ...options.Lister[options.FindOptions]
func (_e *ConnectorMock_Expecter) Find(filter interface{}, opts ...interface{}) *ConnectorMock_Find_Call {
	return &ConnectorMock_Find_Call{Call: _e.mock.On("Find",
		append([]interface{}{filter}, opts...)...)}
}

func (_c *ConnectorMock_Find_Call) Run(run func(filter interface{}, opts ...options.Lister[options.FindOptions])) *ConnectorMock_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 []options.Lister[options.FindOptions]
		variadicArgs := make([]options.Lister[options.FindOptions], len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.FindOptions])
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *ConnectorMock_Find_Call) Return(cursor *mongo.Cursor, err error) *ConnectorMock_Find_Call {
	_c.Call.Return(cursor, err)
	return _c
}

func (_c *ConnectorMock_Find_Call) RunAndReturn(run func(filter interface{}, opts ...options.Lister[options.FindOptions]) (*mongo.Cursor, error)) *ConnectorMock_Find_Call {
	_c.Call.Return(run)
	return _c
}

// FindOne provides a mock function for the type ConnectorMock
func (_mock *ConnectorMock) FindOne(filter interface{}, opts ...options.Lister[options.FindOneOptions]) *mongo.SingleResult {
	// options.Lister[options.FindOneOptions]
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, filter)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 *mongo.SingleResult
	if returnFunc, ok := ret.Get(0).(func(interface{}, ...options.Lister[options.FindOneOptions]) *mongo.SingleResult); ok {
		r0 = returnFunc(filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.SingleResult)
		}
	}
	return r0
}

// ConnectorMock_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type ConnectorMock_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - filter interface{}
//   - opts ...options.Lister[options.FindOneOptions]
func (_e *ConnectorMock_Expecter) FindOne(filter interface{}, opts ...interface{}) *ConnectorMock_FindOne_Call {
	return &ConnectorMock_FindOne_Call{Call: _e.mock.On("FindOne",
		append([]interface{}{filter}, opts...)...)}
}

func (_c *ConnectorMock_FindOne_Call) Run(run func(filter interface{}, opts ...options.Lister[options.FindOneOptions])) *ConnectorMock_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 []options.Lister[options.FindOneOptions]
		variadicArgs := make([]options.Lister[options.FindOneOptions], len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.FindOneOptions])
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *ConnectorMock_FindOne_Call) Return(singleResult *mongo.SingleResult) *ConnectorMock_FindOne_Call {
	_c.Call.Return(singleResult)
	return _c
}

func (_c *ConnectorMock_FindOne_Call) RunAndReturn(run func(filter interface{}, opts ...options.Lister[options.FindOneOptions]) *mongo.SingleResult) *ConnectorMock_FindOne_Call {
	_c.Call.Return(run)
	return _c
}

// FindOneAndDelete provides a mock function for the type ConnectorMock
func (_mock *ConnectorMock) FindOneAndDelete(filter interface{}, opts ...options.Lister[options.FindOneAndDeleteOptions]) *mongo.SingleResult {
	// options.Lister[options.FindOneAndDeleteOptions]
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, filter)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindOneAndDelete")
	}

	var r0 *mongo.SingleResult
	if returnFunc, ok := ret.Get(0).(func(interface{}, ...options.Lister[options.FindOneAndDeleteOptions]) *mongo.SingleResult); ok {
		r0 = returnFunc(filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.SingleResult)
		}
	}
	return r0
}

// ConnectorMock_FindOneAndDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOneAndDelete'
type ConnectorMock_FindOneAndDelete_Call struct {
	*mock.Call
}

// FindOneAndDelete is a helper method to define mock.On call
//   - filter interface{}
//   - opts ...options.Lister[options.FindOneAndDeleteOptions]
func (_e *ConnectorMock_Expecter) FindOneAndDelete(filter interface{}, opts ...interface{}) *ConnectorMock_FindOneAndDelete_Call {
	return &ConnectorMock_FindOneAndDelete_Call{Call: _e.mock.On("FindOneAndDelete",
		append([]interface{}{filter}, opts...)...)}
}

func (_c *ConnectorMock_FindOneAndDelete_Call) Run(run func(filter interface{}, opts ...options.Lister[options.FindOneAndDeleteOptions])) *ConnectorMock_FindOneAndDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 []options.Lister[options.FindOneAndDeleteOptions]
		variadicArgs := make([]options.Lister[options.FindOneAndDeleteOptions], len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.FindOneAndDeleteOptions])
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *ConnectorMock_FindOneAndDelete_Call) Return(singleResult *mongo.SingleResult) *ConnectorMock_FindOneAndDelete_Call {
	_c.Call.Return(singleResult)
	return _c
}

func (_c *ConnectorMock_FindOneAndDelete_Call) RunAndReturn(run func(filter interface{}, opts ...options.Lister[options.FindOneAndDeleteOptions]) *mongo.SingleResult) *ConnectorMock_FindOneAndDelete_Call {
	_c.Call.Return(run)
	return _c
}

// FindOneAndReplace provides a mock function for the type ConnectorMock
func (_mock *ConnectorMock) FindOneAndReplace(filter interface{}, replacement interface{}, opts ...options.Lister[options.FindOneAndReplaceOptions]) *mongo.SingleResult {
	// options.Lister[options.FindOneAndReplaceOptions]
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, filter, replacement)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindOneAndReplace")
	}

	var r0 *mongo.SingleResult
	if returnFunc, ok := ret.Get(0).(func(interface{}, interface{}, ...options.Lister[options.FindOneAndReplaceOptions]) *mongo.SingleResult); ok {
		r0 = returnFunc(filter, replacement, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.SingleResult)
		}
	}
	return r0
}

// ConnectorMock_FindOneAndReplace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOneAndReplace'
type ConnectorMock_FindOneAndReplace_Call struct {
	*mock.Call
}

// FindOneAndReplace is a helper method to define mock.On call
//   - filter interface{}
//   - replacement interface{}
//   - opts ...options.Lister[options.FindOneAndReplaceOptions]
func (_e *ConnectorMock_Expecter) FindOneAndReplace(filter interface{}, replacement interface{}, opts ...interface{}) *ConnectorMock_FindOneAndReplace_Call {
	return &ConnectorMock_FindOneAndReplace_Call{Call: _e.mock.On("FindOneAndReplace",
		append([]interface{}{filter, replacement}, opts...)...)}
}

func (_c *ConnectorMock_FindOneAndReplace_Call) Run(run func(filter interface{}, replacement interface{}, opts ...options.Lister[options.FindOneAndReplaceOptions])) *ConnectorMock_FindOneAndReplace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		var arg2 []options.Lister[options.FindOneAndReplaceOptions]
		variadicArgs := make([]options.Lister[options.FindOneAndReplaceOptions], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.FindOneAndReplaceOptions])
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ConnectorMock_FindOneAndReplace_Call) Return(singleResult *mongo.SingleResult) *ConnectorMock_FindOneAndReplace_Call {
	_c.Call.Return(singleResult)
	return _c
}

func (_c *ConnectorMock_FindOneAndReplace_Call) RunAndReturn(run func(filter interface{}, replacement interface{}, opts ...options.Lister[options.FindOneAndReplaceOptions]) *mongo.SingleResult) *ConnectorMock_FindOneAndReplace_Call {
	_c.Call.Return(run)
	return _c
}

// FindOneAndUpdate provides a mock function for the type ConnectorMock
func (_mock *ConnectorMock) FindOneAndUpdate(filter interface{}, update interface{}, opts ...options.Lister[options.FindOneAndUpdateOptions]) *mongo.SingleResult {
	// options.Lister[options.FindOneAndUpdateOptions]
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, filter, update)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindOneAndUpdate")
	}

	var r0 *mongo.SingleResult
	if returnFunc, ok := ret.Get(0).(func(interface{}, interface{}, ...options.Lister[options.FindOneAndUpdateOptions]) *mongo.SingleResult); ok {
		r0 = returnFunc(filter, update, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.SingleResult)
		}
	}
	return r0
}

// ConnectorMock_FindOneAndUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOneAndUpdate'
type ConnectorMock_FindOneAndUpdate_Call struct {
	*mock.Call
}

// FindOneAndUpdate is a helper method to define mock.On call
//   - filter interface{}
//   - update interface{}
//   - opts ...options.Lister[options.FindOneAndUpdateOptions]
func (_e *ConnectorMock_Expecter) FindOneAndUpdate(filter interface{}, update interface{}, opts ...interface{}) *ConnectorMock_FindOneAndUpdate_Call {
	return &ConnectorMock_FindOneAndUpdate_Call{Call: _e.mock.On("FindOneAndUpdate",
		append([]interface{}{filter, update}, opts...)...)}
}

func (_c *ConnectorMock_FindOneAndUpdate_Call) Run(run func(filter interface{}, update interface{}, opts ...options.Lister[options.FindOneAndUpdateOptions])) *ConnectorMock_FindOneAndUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		var arg2 []options.Lister[options.FindOneAndUpdateOptions]
		variadicArgs := make([]options.Lister[options.FindOneAndUpdateOptions], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.FindOneAndUpdateOptions])
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ConnectorMock_FindOneAndUpdate_Call) Return(singleResult *mongo.SingleResult) *ConnectorMock_FindOneAndUpdate_Call {
	_c.Call.Return(singleResult)
	return _c
}

func (_c *ConnectorMock_FindOneAndUpdate_Call) RunAndReturn(run func(filter interface{}, update interface{}, opts ...options.Lister[options.FindOneAndUpdateOptions]) *mongo.SingleResult) *ConnectorMock_FindOneAndUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// GetNextSeq provides a mock function for the type ConnectorMock
func (_mock *ConnectorMock) GetNextSeq(name string, opts ...string) (int64, error) {
	// string
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNextSeq")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, ...string) (int64, error)); ok {
		return returnFunc(name, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(string, ...string) int64); ok {
		r0 = returnFunc(name, opts...)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = returnFunc(name, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ConnectorMock_GetNextSeq_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNextSeq'
type ConnectorMock_GetNextSeq_Call struct {
	*mock.Call
}

// GetNextSeq is a helper method to define mock.On call
//   - name string
//   - opts ...string
func (_e *ConnectorMock_Expecter) GetNextSeq(name interface{}, opts ...interface{}) *ConnectorMock_GetNextSeq_Call {
	return &ConnectorMock_GetNextSeq_Call{Call: _e.mock.On("GetNextSeq",
		append([]interface{}{name}, opts...)...)}
}

func (_c *ConnectorMock_GetNextSeq_Call) Run(run func(name string, opts ...string)) *ConnectorMock_GetNextSeq_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []string
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *ConnectorMock_GetNextSeq_Call) Return(res int64, err error) *ConnectorMock_GetNextSeq_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *ConnectorMock_GetNextSeq_Call) RunAndReturn(run func(name string, opts ...string) (int64, error)) *ConnectorMock_GetNextSeq_Call {
	_c.Call.Return(run)
	return _c
}

// Indexes provides a mock function for the type ConnectorMock
func (_mock *ConnectorMock) Indexes() (*mongo.IndexView, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Indexes")
	}

	var r0 *mongo.IndexView
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*mongo.IndexView, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *mongo.IndexView); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.IndexView)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ConnectorMock_Indexes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Indexes'
type ConnectorMock_Indexes_Call struct {
	*mock.Call
}

// Indexes is a helper method to define mock.On call
func (_e *ConnectorMock_Expecter) Indexes() *ConnectorMock_Indexes_Call {
	return &ConnectorMock_Indexes_Call{Call: _e.mock.On("Indexes")}
}

func (_c *ConnectorMock_Indexes_Call) Run(run func()) *ConnectorMock_Indexes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConnectorMock_Indexes_Call) Return(indexView *mongo.IndexView, err error) *ConnectorMock_Indexes_Call {
	_c.Call.Return(indexView, err)
	return _c
}

func (_c *ConnectorMock_Indexes_Call) RunAndReturn(run func() (*mongo.IndexView, error)) *ConnectorMock_Indexes_Call {
	_c.Call.Return(run)
	return _c
}

// InsertMany provides a mock function for the type ConnectorMock
func (_mock *ConnectorMock) InsertMany(document []interface{}, opts ...options.Lister[options.InsertManyOptions]) (*mongo.InsertManyResult, error) {
	// options.Lister[options.InsertManyOptions]
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, document)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InsertMany")
	}

	var r0 *mongo.InsertManyResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]interface{}, ...options.Lister[options.InsertManyOptions]) (*mongo.InsertManyResult, error)); ok {
		return returnFunc(document, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func([]interface{}, ...options.Lister[options.InsertManyOptions]) *mongo.InsertManyResult); ok {
		r0 = returnFunc(document, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.InsertManyResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]interface{}, ...options.Lister[options.InsertManyOptions]) error); ok {
		r1 = returnFunc(document, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ConnectorMock_InsertMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertMany'
type ConnectorMock_InsertMany_Call struct {
	*mock.Call
}

// InsertMany is a helper method to define mock.On call
//   - document []interface{}
//   - opts ...options.Lister[options.InsertManyOptions]
func (_e *ConnectorMock_Expecter) InsertMany(document interface{}, opts ...interface{}) *ConnectorMock_InsertMany_Call {
	return &ConnectorMock_InsertMany_Call{Call: _e.mock.On("InsertMany",
		append([]interface{}{document}, opts...)...)}
}

func (_c *ConnectorMock_InsertMany_Call) Run(run func(document []interface{}, opts ...options.Lister[options.InsertManyOptions])) *ConnectorMock_InsertMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []interface{}
		if args[0] != nil {
			arg0 = args[0].([]interface{})
		}
		var arg1 []options.Lister[options.InsertManyOptions]
		variadicArgs := make([]options.Lister[options.InsertManyOptions], len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.InsertManyOptions])
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *ConnectorMock_InsertMany_Call) Return(res *mongo.InsertManyResult, err error) *ConnectorMock_InsertMany_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *ConnectorMock_InsertMany_Call) RunAndReturn(run func(document []interface{}, opts ...options.Lister[options.InsertManyOptions]) (*mongo.InsertManyResult, error)) *ConnectorMock_InsertMany_Call {
	_c.Call.Return(run)
	return _c
}

// InsertOne provides a mock function for the type ConnectorMock
func (_mock *ConnectorMock) InsertOne(document interface{}, opts ...options.Lister[options.InsertOneOptions]) (*mongo.InsertOneResult, error) {
	// options.Lister[options.InsertOneOptions]
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, document)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InsertOne")
	}

	var r0 *mongo.InsertOneResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(interface{}, ...options.Lister[options.InsertOneOptions]) (*mongo.InsertOneResult, error)); ok {
		return returnFunc(document, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(interface{}, ...options.Lister[options.InsertOneOptions]) *mongo.InsertOneResult); ok {
		r0 = returnFunc(document, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.InsertOneResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(interface{}, ...options.Lister[options.InsertOneOptions]) error); ok {
		r1 = returnFunc(document, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ConnectorMock_InsertOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertOne'
type ConnectorMock_InsertOne_Call struct {
	*mock.Call
}

// InsertOne is a helper method to define mock.On call
//   - document interface{}
//   - opts ...options.Lister[options.InsertOneOptions]
func (_e *ConnectorMock_Expecter) InsertOne(document interface{}, opts ...interface{}) *ConnectorMock_InsertOne_Call {
	return &ConnectorMock_InsertOne_Call{Call: _e.mock.On("InsertOne",
		append([]interface{}{document}, opts...)...)}
}

func (_c *ConnectorMock_InsertOne_Call) Run(run func(document interface{}, opts ...options.Lister[options.InsertOneOptions])) *ConnectorMock_InsertOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 []options.Lister[options.InsertOneOptions]
		variadicArgs := make([]options.Lister[options.InsertOneOptions], len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.InsertOneOptions])
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *ConnectorMock_InsertOne_Call) Return(res *mongo.InsertOneResult, err error) *ConnectorMock_InsertOne_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *ConnectorMock_InsertOne_Call) RunAndReturn(run func(document interface{}, opts ...options.Lister[options.InsertOneOptions]) (*mongo.InsertOneResult, error)) *ConnectorMock_InsertOne_Call {
	_c.Call.Return(run)
	return _c
}

// NewGridfsBucket provides a mock function for the type ConnectorMock
func (_mock *ConnectorMock) NewGridfsBucket() (*mongo.GridFSBucket, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewGridfsBucket")
	}

	var r0 *mongo.GridFSBucket
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*mongo.GridFSBucket, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *mongo.GridFSBucket); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.GridFSBucket)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ConnectorMock_NewGridfsBucket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewGridfsBucket'
type ConnectorMock_NewGridfsBucket_Call struct {
	*mock.Call
}

// NewGridfsBucket is a helper method to define mock.On call
func (_e *ConnectorMock_Expecter) NewGridfsBucket() *ConnectorMock_NewGridfsBucket_Call {
	return &ConnectorMock_NewGridfsBucket_Call{Call: _e.mock.On("NewGridfsBucket")}
}

func (_c *ConnectorMock_NewGridfsBucket_Call) Run(run func()) *ConnectorMock_NewGridfsBucket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConnectorMock_NewGridfsBucket_Call) Return(gridFSBucket *mongo.GridFSBucket, err error) *ConnectorMock_NewGridfsBucket_Call {
	_c.Call.Return(gridFSBucket, err)
	return _c
}

func (_c *ConnectorMock_NewGridfsBucket_Call) RunAndReturn(run func() (*mongo.GridFSBucket, error)) *ConnectorMock_NewGridfsBucket_Call {
	_c.Call.Return(run)
	return _c
}

// Next provides a mock function for the type ConnectorMock
func (_mock *ConnectorMock) Next(cur *mongo.Cursor) bool {
	ret := _mock.Called(cur)

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(*mongo.Cursor) bool); ok {
		r0 = returnFunc(cur)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// ConnectorMock_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type ConnectorMock_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
//   - cur *mongo.Cursor
func (_e *ConnectorMock_Expecter) Next(cur interface{}) *ConnectorMock_Next_Call {
	return &ConnectorMock_Next_Call{Call: _e.mock.On("Next", cur)}
}

func (_c *ConnectorMock_Next_Call) Run(run func(cur *mongo.Cursor)) *ConnectorMock_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *mongo.Cursor
		if args[0] != nil {
			arg0 = args[0].(*mongo.Cursor)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ConnectorMock_Next_Call) Return(b bool) *ConnectorMock_Next_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *ConnectorMock_Next_Call) RunAndReturn(run func(cur *mongo.Cursor) bool) *ConnectorMock_Next_Call {
	_c.Call.Return(run)
	return _c
}

// ReplaceOne provides a mock function for the type ConnectorMock
func (_mock *ConnectorMock) ReplaceOne(filter interface{}, update interface{}, opts ...options.Lister[options.ReplaceOptions]) (*mongo.UpdateResult, error) {
	// options.Lister[options.ReplaceOptions]
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, filter, update)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReplaceOne")
	}

	var r0 *mongo.UpdateResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(interface{}, interface{}, ...options.Lister[options.ReplaceOptions]) (*mongo.UpdateResult, error)); ok {
		return returnFunc(filter, update, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(interface{}, interface{}, ...options.Lister[options.ReplaceOptions]) *mongo.UpdateResult); ok {
		r0 = returnFunc(filter, update, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(interface{}, interface{}, ...options.Lister[options.ReplaceOptions]) error); ok {
		r1 = returnFunc(filter, update, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ConnectorMock_ReplaceOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplaceOne'
type ConnectorMock_ReplaceOne_Call struct {
	*mock.Call
}

// ReplaceOne is a helper method to define mock.On call
//   - filter interface{}
//   - update interface{}
//   - opts ...options.Lister[options.ReplaceOptions]
func (_e *ConnectorMock_Expecter) ReplaceOne(filter interface{}, update interface{}, opts ...interface{}) *ConnectorMock_ReplaceOne_Call {
	return &ConnectorMock_ReplaceOne_Call{Call: _e.mock.On("ReplaceOne",
		append([]interface{}{filter, update}, opts...)...)}
}

func (_c *ConnectorMock_ReplaceOne_Call) Run(run func(filter interface{}, update interface{}, opts ...options.Lister[options.ReplaceOptions])) *ConnectorMock_ReplaceOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		var arg2 []options.Lister[options.ReplaceOptions]
		variadicArgs := make([]options.Lister[options.ReplaceOptions], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.ReplaceOptions])
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ConnectorMock_ReplaceOne_Call) Return(res *mongo.UpdateResult, err error) *ConnectorMock_ReplaceOne_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *ConnectorMock_ReplaceOne_Call) RunAndReturn(run func(filter interface{}, update interface{}, opts ...options.Lister[options.ReplaceOptions]) (*mongo.UpdateResult, error)) *ConnectorMock_ReplaceOne_Call {
	_c.Call.Return(run)
	return _c
}

// SearchIndexes provides a mock function for the type ConnectorMock
func (_mock *ConnectorMock) SearchIndexes() (*mongo.SearchIndexView, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for SearchIndexes")
	}

	var r0 *mongo.SearchIndexView
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*mongo.SearchIndexView, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *mongo.SearchIndexView); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.SearchIndexView)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ConnectorMock_SearchIndexes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchIndexes'
type ConnectorMock_SearchIndexes_Call struct {
	*mock.Call
}

// SearchIndexes is a helper method to define mock.On call
func (_e *ConnectorMock_Expecter) SearchIndexes() *ConnectorMock_SearchIndexes_Call {
	return &ConnectorMock_SearchIndexes_Call{Call: _e.mock.On("SearchIndexes")}
}

func (_c *ConnectorMock_SearchIndexes_Call) Run(run func()) *ConnectorMock_SearchIndexes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConnectorMock_SearchIndexes_Call) Return(searchIndexView *mongo.SearchIndexView, err error) *ConnectorMock_SearchIndexes_Call {
	_c.Call.Return(searchIndexView, err)
	return _c
}

func (_c *ConnectorMock_SearchIndexes_Call) RunAndReturn(run func() (*mongo.SearchIndexView, error)) *ConnectorMock_SearchIndexes_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateById provides a mock function for the type ConnectorMock
func (_mock *ConnectorMock) UpdateById(id interface{}, update interface{}, opts ...options.Lister[options.UpdateOneOptions]) (*mongo.UpdateResult, error) {
	// options.Lister[options.UpdateOneOptions]
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id, update)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateById")
	}

	var r0 *mongo.UpdateResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(interface{}, interface{}, ...options.Lister[options.UpdateOneOptions]) (*mongo.UpdateResult, error)); ok {
		return returnFunc(id, update, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(interface{}, interface{}, ...options.Lister[options.UpdateOneOptions]) *mongo.UpdateResult); ok {
		r0 = returnFunc(id, update, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(interface{}, interface{}, ...options.Lister[options.UpdateOneOptions]) error); ok {
		r1 = returnFunc(id, update, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ConnectorMock_UpdateById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateById'
type ConnectorMock_UpdateById_Call struct {
	*mock.Call
}

// UpdateById is a helper method to define mock.On call
//   - id interface{}
//   - update interface{}
//   - opts ...options.Lister[options.UpdateOneOptions]
func (_e *ConnectorMock_Expecter) UpdateById(id interface{}, update interface{}, opts ...interface{}) *ConnectorMock_UpdateById_Call {
	return &ConnectorMock_UpdateById_Call{Call: _e.mock.On("UpdateById",
		append([]interface{}{id, update}, opts...)...)}
}

func (_c *ConnectorMock_UpdateById_Call) Run(run func(id interface{}, update interface{}, opts ...options.Lister[options.UpdateOneOptions])) *ConnectorMock_UpdateById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		var arg2 []options.Lister[options.UpdateOneOptions]
		variadicArgs := make([]options.Lister[options.UpdateOneOptions], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.UpdateOneOptions])
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ConnectorMock_UpdateById_Call) Return(res *mongo.UpdateResult, err error) *ConnectorMock_UpdateById_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *ConnectorMock_UpdateById_Call) RunAndReturn(run func(id interface{}, update interface{}, opts ...options.Lister[options.UpdateOneOptions]) (*mongo.UpdateResult, error)) *ConnectorMock_UpdateById_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMany provides a mock function for the type ConnectorMock
func (_mock *ConnectorMock) UpdateMany(filter interface{}, update interface{}, opts ...options.Lister[options.UpdateManyOptions]) (*mongo.UpdateResult, error) {
	// options.Lister[options.UpdateManyOptions]
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, filter, update)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMany")
	}

	var r0 *mongo.UpdateResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(interface{}, interface{}, ...options.Lister[options.UpdateManyOptions]) (*mongo.UpdateResult, error)); ok {
		return returnFunc(filter, update, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(interface{}, interface{}, ...options.Lister[options.UpdateManyOptions]) *mongo.UpdateResult); ok {
		r0 = returnFunc(filter, update, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(interface{}, interface{}, ...options.Lister[options.UpdateManyOptions]) error); ok {
		r1 = returnFunc(filter, update, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ConnectorMock_UpdateMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMany'
type ConnectorMock_UpdateMany_Call struct {
	*mock.Call
}

// UpdateMany is a helper method to define mock.On call
//   - filter interface{}
//   - update interface{}
//   - opts ...options.Lister[options.UpdateManyOptions]
func (_e *ConnectorMock_Expecter) UpdateMany(filter interface{}, update interface{}, opts ...interface{}) *ConnectorMock_UpdateMany_Call {
	return &ConnectorMock_UpdateMany_Call{Call: _e.mock.On("UpdateMany",
		append([]interface{}{filter, update}, opts...)...)}
}

func (_c *ConnectorMock_UpdateMany_Call) Run(run func(filter interface{}, update interface{}, opts ...options.Lister[options.UpdateManyOptions])) *ConnectorMock_UpdateMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		var arg2 []options.Lister[options.UpdateManyOptions]
		variadicArgs := make([]options.Lister[options.UpdateManyOptions], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.UpdateManyOptions])
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ConnectorMock_UpdateMany_Call) Return(res *mongo.UpdateResult, err error) *ConnectorMock_UpdateMany_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *ConnectorMock_UpdateMany_Call) RunAndReturn(run func(filter interface{}, update interface{}, opts ...options.Lister[options.UpdateManyOptions]) (*mongo.UpdateResult, error)) *ConnectorMock_UpdateMany_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOne provides a mock function for the type ConnectorMock
func (_mock *ConnectorMock) UpdateOne(filter interface{}, update interface{}, opts ...options.Lister[options.UpdateOneOptions]) (*mongo.UpdateResult, error) {
	// options.Lister[options.UpdateOneOptions]
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, filter, update)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOne")
	}

	var r0 *mongo.UpdateResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(interface{}, interface{}, ...options.Lister[options.UpdateOneOptions]) (*mongo.UpdateResult, error)); ok {
		return returnFunc(filter, update, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(interface{}, interface{}, ...options.Lister[options.UpdateOneOptions]) *mongo.UpdateResult); ok {
		r0 = returnFunc(filter, update, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(interface{}, interface{}, ...options.Lister[options.UpdateOneOptions]) error); ok {
		r1 = returnFunc(filter, update, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ConnectorMock_UpdateOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOne'
type ConnectorMock_UpdateOne_Call struct {
	*mock.Call
}

// UpdateOne is a helper method to define mock.On call
//   - filter interface{}
//   - update interface{}
//   - opts ...options.Lister[options.UpdateOneOptions]
func (_e *ConnectorMock_Expecter) UpdateOne(filter interface{}, update interface{}, opts ...interface{}) *ConnectorMock_UpdateOne_Call {
	return &ConnectorMock_UpdateOne_Call{Call: _e.mock.On("UpdateOne",
		append([]interface{}{filter, update}, opts...)...)}
}

func (_c *ConnectorMock_UpdateOne_Call) Run(run func(filter interface{}, update interface{}, opts ...options.Lister[options.UpdateOneOptions])) *ConnectorMock_UpdateOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		var arg2 []options.Lister[options.UpdateOneOptions]
		variadicArgs := make([]options.Lister[options.UpdateOneOptions], len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.UpdateOneOptions])
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ConnectorMock_UpdateOne_Call) Return(res *mongo.UpdateResult, err error) *ConnectorMock_UpdateOne_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *ConnectorMock_UpdateOne_Call) RunAndReturn(run func(filter interface{}, update interface{}, opts ...options.Lister[options.UpdateOneOptions]) (*mongo.UpdateResult, error)) *ConnectorMock_UpdateOne_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function for the type ConnectorMock
func (_mock *ConnectorMock) Watch(pipeline interface{}, opts ...options.Lister[options.ChangeStreamOptions]) (*mongo.ChangeStream, error) {
	// options.Lister[options.ChangeStreamOptions]
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, pipeline)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 *mongo.ChangeStream
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(interface{}, ...options.Lister[options.ChangeStreamOptions]) (*mongo.ChangeStream, error)); ok {
		return returnFunc(pipeline, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(interface{}, ...options.Lister[options.ChangeStreamOptions]) *mongo.ChangeStream); ok {
		r0 = returnFunc(pipeline, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.ChangeStream)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(interface{}, ...options.Lister[options.ChangeStreamOptions]) error); ok {
		r1 = returnFunc(pipeline, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ConnectorMock_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type ConnectorMock_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - pipeline interface{}
//   - opts ...options.Lister[options.ChangeStreamOptions]
func (_e *ConnectorMock_Expecter) Watch(pipeline interface{}, opts ...interface{}) *ConnectorMock_Watch_Call {
	return &ConnectorMock_Watch_Call{Call: _e.mock.On("Watch",
		append([]interface{}{pipeline}, opts...)...)}
}

func (_c *ConnectorMock_Watch_Call) Run(run func(pipeline interface{}, opts ...options.Lister[options.ChangeStreamOptions])) *ConnectorMock_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		var arg1 []options.Lister[options.ChangeStreamOptions]
		variadicArgs := make([]options.Lister[options.ChangeStreamOptions], len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.ChangeStreamOptions])
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *ConnectorMock_Watch_Call) Return(stream *mongo.ChangeStream, err error) *ConnectorMock_Watch_Call {
	_c.Call.Return(stream, err)
	return _c
}

func (_c *ConnectorMock_Watch_Call) RunAndReturn(run func(pipeline interface{}, opts ...options.Lister[options.ChangeStreamOptions]) (*mongo.ChangeStream, error)) *ConnectorMock_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// WithCollection provides a mock function for the type ConnectorMock
func (_mock *ConnectorMock) WithCollection(coll string, opts ...options.Lister[options.CollectionOptions]) mongodb.Connector {
	// options.Lister[options.CollectionOptions]
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, coll)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WithCollection")
	}

	var r0 mongodb.Connector
	if returnFunc, ok := ret.Get(0).(func(string, ...options.Lister[options.CollectionOptions]) mongodb.Connector); ok {
		r0 = returnFunc(coll, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongodb.Connector)
		}
	}
	return r0
}

// ConnectorMock_WithCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithCollection'
type ConnectorMock_WithCollection_Call struct {
	*mock.Call
}

// WithCollection is a helper method to define mock.On call
//   - coll string
//   - opts ...options.Lister[options.CollectionOptions]
func (_e *ConnectorMock_Expecter) WithCollection(coll interface{}, opts ...interface{}) *ConnectorMock_WithCollection_Call {
	return &ConnectorMock_WithCollection_Call{Call: _e.mock.On("WithCollection",
		append([]interface{}{coll}, opts...)...)}
}

func (_c *ConnectorMock_WithCollection_Call) Run(run func(coll string, opts ...options.Lister[options.CollectionOptions])) *ConnectorMock_WithCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []options.Lister[options.CollectionOptions]
		variadicArgs := make([]options.Lister[options.CollectionOptions], len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(options.Lister[options.CollectionOptions])
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *ConnectorMock_WithCollection_Call) Return(connector mongodb.Connector) *ConnectorMock_WithCollection_Call {
	_c.Call.Return(connector)
	return _c
}

func (_c *ConnectorMock_WithCollection_Call) RunAndReturn(run func(coll string, opts ...options.Lister[options.CollectionOptions]) mongodb.Connector) *ConnectorMock_WithCollection_Call {
	_c.Call.Return(run)
	return _c
}

// WithContext provides a mock function for the type ConnectorMock
func (_mock *ConnectorMock) WithContext(context1 context.Context) mongodb.Connector {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for WithContext")
	}

	var r0 mongodb.Connector
	if returnFunc, ok := ret.Get(0).(func(context.Context) mongodb.Connector); ok {
		r0 = returnFunc(context1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongodb.Connector)
		}
	}
	return r0
}

// ConnectorMock_WithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithContext'
type ConnectorMock_WithContext_Call struct {
	*mock.Call
}

// WithContext is a helper method to define mock.On call
//   - context1 context.Context
func (_e *ConnectorMock_Expecter) WithContext(context1 interface{}) *ConnectorMock_WithContext_Call {
	return &ConnectorMock_WithContext_Call{Call: _e.mock.On("WithContext", context1)}
}

func (_c *ConnectorMock_WithContext_Call) Run(run func(context1 context.Context)) *ConnectorMock_WithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ConnectorMock_WithContext_Call) Return(connector mongodb.Connector) *ConnectorMock_WithContext_Call {
	_c.Call.Return(connector)
	return _c
}

func (_c *ConnectorMock_WithContext_Call) RunAndReturn(run func(context1 context.Context) mongodb.Connector) *ConnectorMock_WithContext_Call {
	_c.Call.Return(run)
	return _c
}
